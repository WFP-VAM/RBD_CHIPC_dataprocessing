library(flexdashboard)
library(tidyverse)
library(DT)
library(plotly)
library(readxl)
library(leaflet)
library(sf)
library(leaflet.extras2)
#add CH shapefile
CH <- read_sf("wca_CHIPC_clean_nov2020.gpkg")
#add CH shapefile
CH <- read_sf("C:\\RBD_CHIPC_dataprocessing\\data\\geo\\Shapefiles Nov 2020\\wca_CHIPC_clean_nov2020.gpkg")
#add boundarry of countries
wca_shp0 <- read_sf("C:\\RBD_CHIPC_dataprocessing\\data\\geo\\Shapefiles Nov 2020\\wca_shp0.gpkg")
names(CH)
library(tidyverse)
library(sf)
library(googlesheets4)
library(rgdal)
library(janitor)
library(rmapshaper)
#add CH data
library(readxl)
cadre_harmonise_caf_ipc <- read_excel("data/processed/cadre_harmonise_caf_ipc.xlsx")
cadre_harmonise_caf_ipc_nov2020current <- cadre_harmonise_caf_ipc %>% filter(exercise_year == 2020 & exercise_label == "Sep-Dec" & chtype == "current")
cadre_harmonise_caf_ipc_nov2020projected <- cadre_harmonise_caf_ipc %>% filter(exercise_year == 2020 & exercise_label == "Sep-Dec" & chtype == "projected") %>% select(adm0_name,adm1_name,adm2_name, population, phase_class, phase1, phase2, phase3, phase4, phase5, phase35)
cadre_harmonise_caf_ipc_nov2020 <- left_join(cadre_harmonise_caf_ipc_nov2020current, cadre_harmonise_caf_ipc_nov2020projected, by = c("adm0_name","adm1_name","adm2_name"))
setwd("C:/RBD_CHIPC_dataprocessing")
library(tidyverse)
library(sf)
library(googlesheets4)
library(rgdal)
library(janitor)
library(rmapshaper)
#add CH data
library(readxl)
cadre_harmonise_caf_ipc <- read_excel("data/processed/cadre_harmonise_caf_ipc.xlsx")
cadre_harmonise_caf_ipc_nov2020current <- cadre_harmonise_caf_ipc %>% filter(exercise_year == 2020 & exercise_label == "Sep-Dec" & chtype == "current")
cadre_harmonise_caf_ipc_nov2020projected <- cadre_harmonise_caf_ipc %>% filter(exercise_year == 2020 & exercise_label == "Sep-Dec" & chtype == "projected") %>% select(adm0_name,adm1_name,adm2_name, population, phase_class, phase1, phase2, phase3, phase4, phase5, phase35)
cadre_harmonise_caf_ipc_nov2020 <- left_join(cadre_harmonise_caf_ipc_nov2020current, cadre_harmonise_caf_ipc_nov2020projected, by = c("adm0_name","adm1_name","adm2_name"))
names(cadre_harmonise_caf_ipc_nov2020)
library(tidyverse)
library(sf)
library(googlesheets4)
library(rgdal)
library(janitor)
library(rmapshaper)
#add CH data
library(readxl)
cadre_harmonise_caf_ipc <- read_excel("data/processed/cadre_harmonise_caf_ipc.xlsx")
cadre_harmonise_caf_ipc_nov2020current <- cadre_harmonise_caf_ipc %>% filter(exercise_year == 2020 & exercise_label == "Sep-Dec" & chtype == "current")
cadre_harmonise_caf_ipc_nov2020projected <- cadre_harmonise_caf_ipc %>% filter(exercise_year == 2020 & exercise_label == "Sep-Dec" & chtype == "projected") %>% select(adm0_name,adm1_name,adm2_name, population, phase_class, phase1, phase2, phase3, phase4, phase5, phase35)
cadre_harmonise_caf_ipc_nov2020 <- left_join(cadre_harmonise_caf_ipc_nov2020current, cadre_harmonise_caf_ipc_nov2020projected, by = c("adm0_name","adm1_name","adm2_name"))
cadre_harmonise_caf_ipc_nov2020adm1 <- cadre_harmonise_caf_ipc_nov2020  %>% filter(adm0_name %in% c("Cote d'Ivoire","Ghana","Liberia","Gambia","Guinea-Bissau")) %>% select(adm1_gaulcode,
currentnov2020_population = population.x, currentnov2020_phase_class = phase_class.x, currentnov2020_phase1 = phase1.x, currentnov2020_phase2 = phase2.x, currentnov2020_phase3 = phase3.x, currentnov2020_phase4 = phase4.x, currentnov2020_phase5 = phase5.x,  currentnov2020_phase35 = phase35.x,  currentnov2020_FCG_finalphase = FCG_finalphase, currentnov2020_HDDS_finalphase = HDDS_finalphase, currentnov2020_HHS_finalphase = HHS_finalphase, currentnov2020_LhHCSCat_finalphase = LhHCSCat_finalphase, currentnov2020_rCSI_finalphase = rCSI_finalphase,
projectednov2020_population = population.y, projectednov2020_phase_class = phase_class.y, projectednov2020_phase1 = phase1.y, projectednov2020_phase2 = phase2.y, projectednov2020_phase3 = phase3.y, projectednov2020_phase4 = phase4.y, projectednov2020_phase5 = phase5.y,  projectednov2020_phase35 = phase35.y)
cadre_harmonise_caf_ipc_nov2020adm2 <- cadre_harmonise_caf_ipc_nov2020  %>% filter(adm0_name %in% c("Benin","Burkina Faso","Cameroon","Central African Republic", "Chad","Guinea", "Mali", "Mauritania", "Nigeria", "Senegal", "Sierra Leone", "Togo")) %>% select(adm2_gaulcode, currentnov2020_population = population.x, currentnov2020_phase_class = phase_class.x, currentnov2020_phase1 = phase1.x, currentnov2020_phase2 = phase2.x, currentnov2020_phase3 = phase3.x, currentnov2020_phase4 = phase4.x, currentnov2020_phase5 = phase5.x,  currentnov2020_phase35 = phase35.x, currentnov2020_FCG_finalphase = FCG_finalphase, currentnov2020_HDDS_finalphase = HDDS_finalphase, currentnov2020_HHS_finalphase = HHS_finalphase, currentnov2020_LhHCSCat_finalphase = LhHCSCat_finalphase, currentnov2020_rCSI_finalphase = rCSI_finalphase,
projectednov2020_population = population.y, projectednov2020_phase_class = phase_class.y, projectednov2020_phase1 = phase1.y, projectednov2020_phase2 = phase2.y, projectednov2020_phase3 = phase3.y, projectednov2020_phase4 = phase4.y, projectednov2020_phase5 = phase5.y,  projectednov2020_phase35 = phase35.y)
cadre_harmonise_caf_ipc_nov2020adm2niger <- cadre_harmonise_caf_ipc_nov2020  %>% filter(adm0_name %in% c("Niger")) %>% rename(currentnov2020_population = population.x, currentnov2020_phase_class = phase_class.x, currentnov2020_phase1 = phase1.x, currentnov2020_phase2 = phase2.x, currentnov2020_phase3 = phase3.x, currentnov2020_phase4 = phase4.x, currentnov2020_phase5 = phase5.x,  currentnov2020_phase35 = phase35.x, currentnov2020_FCG_finalphase = FCG_finalphase, currentnov2020_HDDS_finalphase = HDDS_finalphase, currentnov2020_HHS_finalphase = HHS_finalphase, currentnov2020_LhHCSCat_finalphase = LhHCSCat_finalphase, currentnov2020_rCSI_finalphase = rCSI_finalphase, projectednov2020_population = population.y, projectednov2020_phase_class = phase_class.y, projectednov2020_phase1 = phase1.y, projectednov2020_phase2 = phase2.y, projectednov2020_phase3 = phase3.y, projectednov2020_phase4 = phase4.y, projectednov2020_phase5 = phase5.y,  projectednov2020_phase35 = phase35.y) %>%
select(-region,-chtype,-exercise_code,-exercise_label,-exercise_year,-reference_code,-reference_label,-reference_year,-status,-notes,-Comments,-DataSource,-UseThisPeriod)
#Ghana shape
GHA_shp <- read_sf("data\\geo\\Shapefiles Nov 2020\\CH NovNGA-CHA Shapefile\\GHA_ch_november_2020_20201201.shp")
GHA_shp %>% ggplot() +geom_sf(data=GHA_shp,  lwd=1.5, fill=NA) +geom_sf_label(aes(label = adm1_name))
#looking at other maps - the adm1_name "Brong" should be changed to "Bono"
GHA_shp <- GHA_shp %>% mutate(adm1_name = case_when(
adm1_name == "Brong" ~ "Bono", TRUE ~ adm1_name)) %>% select(-Current, -Projected)
### Save it to shapefile
st_write(GHA_shp, "data\\geo\\Shapefiles Nov 2020\\CH NovNGA-CHA Shapefile\\GHA_ch_november_2020.shp", delete_layer = TRUE)
#add Adm1 level for countries with only Adm1 level CH data - add in the southern part of Nigeria which didnt do CH
wca_shp1all <- read_sf("data\\geo\\GIS2\\bnd_adm1_gaul_revised vam_cod_20190304.shp")
wca_shp1 <- wca_shp1all %>% filter(adm0_name %in% c("Côte d'Ivoire","Guinea","Liberia","Gambia","Guinea-Bissau","Nigeria"))
wca_shp1 <- wca_shp1all %>% filter(!adm0_name %in% c("Abuja","Adamawa","Bauchi","Benue","Borno","Gombe","Jigawa","Kaduna","Kano","Katsina","Kebbi","Niger","Plateau","Sokoto","Taraba","Yobe", "Zamfara"))
#add together Ghana and adm1
wca_adm1 <- bind_rows(wca_shp1, GHA_shp)
#join
wca_adm1 <- wca_adm1 %>% rename(adm1_gaulcode = adm1_code)
wca_adm1_ch <- left_join(wca_adm1, cadre_harmonise_caf_ipc_nov2020adm1, by = "adm1_gaulcode")
#add Adm2 level for countries with Adm2 level data
wca_shp2all <- read_sf("data\\geo\\GIS2\\bnd_adm2_gaul_revised vam_cod_20190304.shp")
#select only areas that have data or dont have adm2
vars2 = c("Benin","Burkina Faso","Cameroon","Central African Republic", "Chad", "Guinea", "Mali", "Mauritania", "Senegal", "Sierra Leone", "Togo")
wca_shp2 <- wca_shp2all %>% filter(adm0_name %in% vars2)
#remove the states in Nigeria that didnt do the exercise
wca_shp2NGA <- wca_shp2all %>% filter(adm0_name =="Nigeria") %>% filter(adm1_name %in% c("Abuja","Adamawa","Bauchi","Benue","Borno","Gombe","Jigawa","Kaduna","Kano","Katsina","Kebbi","Niger","Plateau","Sokoto","Taraba","Yobe", "Zamfara"))
#add Nigeria with other countries
wca_adm2 <- bind_rows(wca_shp2, wca_shp2NGA)
#their is tw0  adm2 code with duplicates - Bangui and Satema in CAR
wca_adm2 %>% get_dupes(adm2_code)
wca_adm2 <- wca_adm2 %>% mutate(adm2_code = case_when(
adm2_name == "Satéma" ~ 67156,
TRUE ~ adm2_code))
#join
wca_adm2 <- wca_adm2 %>% rename(adm2_gaulcode = adm2_code)
wca_adm2_ch <- left_join(wca_adm2, cadre_harmonise_caf_ipc_nov2020adm2, by = "adm2_gaulcode")
#add adm1 & amd2
wca_ch <- bind_rows(wca_adm1_ch, wca_adm2_ch)
#add Niger file
niger <- read_sf("data\\geo\\Shapefiles Nov 2020\\NER_CH_NOV2020.shp")
#join
niger <- niger %>% select(adm2_gaulcode = adm2_cd)
cadre_harmonise_caf_ipc_nov2020adm2niger$adm2_gaulcode <- as.character(cadre_harmonise_caf_ipc_nov2020adm2niger$adm2_gaulcode)
niger <- left_join(niger, cadre_harmonise_caf_ipc_nov2020adm2niger, by = "adm2_gaulcode")
#put it all together
wca_ch$adm2_gaulcode <- as.character(wca_ch$adm2_gaulcode)
wca_CHIPC_nov2020 <- bind_rows(wca_ch, niger)
#replace NA with Not Analyzed
wca_CHIPC_nov2020$currentnov2020_phase_class <- wca_CHIPC_nov2020$currentnov2020_phase_class %>% replace_na("Not Analyzed")
wca_CHIPC_nov2020$projectednov2020_phase_class <- wca_CHIPC_nov2020$projectednov2020_phase_class %>% replace_na("Not Analyzed")
#fix and reduce size
wca_CHIPC_clean_nov2020 <- st_make_valid(wca_CHIPC_nov2020)
wca_CHIPC_clean_nov2020 <- rmapshaper::ms_simplify(wca_CHIPC_clean_nov2020, keep_shapes = TRUE) # simplify polygons
### Save it as .gpkg file
st_write(wca_CHIPC_clean_nov2020, "data\\geo\\Shapefiles Nov 2020\\wca_CHIPC_clean_nov2020.gpkg", driver="GPKG", append = T)
##get adm0
#add Adm0 level to use as outline in viz
wca_shp0 <- read_sf("data\\geo\\GIS2\\bnd_adm0_gaul_revised vam_cod_20190304.shp")
wca_shp0 <- wca_shp0 %>% filter(Adm0_Name != "Sao Tome and Principe" & Adm0_Name != "Cape Verde")
#fix and reduce size
wca_shp0 <- st_make_valid(wca_shp0)
wca_shp0 <- rmapshaper::ms_simplify(wca_shp0, keep_shapes = TRUE) # simplify polygons
### Save it as .gpkg file
st_write(wca_shp0, "data\\geo\\Shapefiles Nov 2020\\wca_shp0.gpkg", driver="GPKG", append = T)
#add CH shapefile
CH <- read_sf("C:\\RBD_CHIPC_dataprocessing\\data\\geo\\Shapefiles Nov 2020\\wca_CHIPC_clean_nov2020.gpkg")
#add boundarry of countries
wca_shp0 <- read_sf("C:\\RBD_CHIPC_dataprocessing\\data\\geo\\Shapefiles Nov 2020\\wca_shp0.gpkg")
names(CH)
library(tidyverse)
library(sf)
library(googlesheets4)
library(rgdal)
library(janitor)
library(rmapshaper)
#add CH data
library(readxl)
cadre_harmonise_caf_ipc <- read_excel("data/processed/cadre_harmonise_caf_ipc.xlsx")
cadre_harmonise_caf_ipc_nov2020current <- cadre_harmonise_caf_ipc %>% filter(exercise_year == 2020 & exercise_label == "Sep-Dec" & chtype == "current")
cadre_harmonise_caf_ipc_nov2020projected <- cadre_harmonise_caf_ipc %>% filter(exercise_year == 2020 & exercise_label == "Sep-Dec" & chtype == "projected") %>% select(adm0_name,adm1_name,adm2_name, population, phase_class, phase1, phase2, phase3, phase4, phase5, phase35)
cadre_harmonise_caf_ipc_nov2020 <- left_join(cadre_harmonise_caf_ipc_nov2020current, cadre_harmonise_caf_ipc_nov2020projected, by = c("adm0_name","adm1_name","adm2_name"))
cadre_harmonise_caf_ipc_nov2020adm1 <- cadre_harmonise_caf_ipc_nov2020  %>% filter(adm0_name %in% c("Cote d'Ivoire","Ghana","Liberia","Gambia","Guinea-Bissau")) %>% select(adm1_gaulcode,
currentnov2020_population = population.x, currentnov2020_phase_class = phase_class.x, currentnov2020_phase1 = phase1.x, currentnov2020_phase2 = phase2.x, currentnov2020_phase3 = phase3.x, currentnov2020_phase4 = phase4.x, currentnov2020_phase5 = phase5.x,  currentnov2020_phase35 = phase35.x,  currentnov2020_FCG_finalphase = FCG_finalphase, currentnov2020_HDDS_finalphase = HDDS_finalphase, currentnov2020_HHS_finalphase = HHS_finalphase, currentnov2020_LhHCSCat_finalphase = LhHCSCat_finalphase, currentnov2020_rCSI_finalphase = rCSI_finalphase,
projectednov2020_population = population.y, projectednov2020_phase_class = phase_class.y, projectednov2020_phase1 = phase1.y, projectednov2020_phase2 = phase2.y, projectednov2020_phase3 = phase3.y, projectednov2020_phase4 = phase4.y, projectednov2020_phase5 = phase5.y,  projectednov2020_phase35 = phase35.y)
cadre_harmonise_caf_ipc_nov2020adm2 <- cadre_harmonise_caf_ipc_nov2020  %>% filter(adm0_name %in% c("Benin","Burkina Faso","Cameroon","Central African Republic", "Chad","Guinea", "Mali", "Mauritania", "Nigeria", "Senegal", "Sierra Leone", "Togo")) %>% select(adm2_gaulcode, currentnov2020_population = population.x, currentnov2020_phase_class = phase_class.x, currentnov2020_phase1 = phase1.x, currentnov2020_phase2 = phase2.x, currentnov2020_phase3 = phase3.x, currentnov2020_phase4 = phase4.x, currentnov2020_phase5 = phase5.x,  currentnov2020_phase35 = phase35.x, currentnov2020_FCG_finalphase = FCG_finalphase, currentnov2020_HDDS_finalphase = HDDS_finalphase, currentnov2020_HHS_finalphase = HHS_finalphase, currentnov2020_LhHCSCat_finalphase = LhHCSCat_finalphase, currentnov2020_rCSI_finalphase = rCSI_finalphase,
projectednov2020_population = population.y, projectednov2020_phase_class = phase_class.y, projectednov2020_phase1 = phase1.y, projectednov2020_phase2 = phase2.y, projectednov2020_phase3 = phase3.y, projectednov2020_phase4 = phase4.y, projectednov2020_phase5 = phase5.y,  projectednov2020_phase35 = phase35.y)
cadre_harmonise_caf_ipc_nov2020adm2niger <- cadre_harmonise_caf_ipc_nov2020  %>% filter(adm0_name %in% c("Niger")) %>% rename(currentnov2020_population = population.x, currentnov2020_phase_class = phase_class.x, currentnov2020_phase1 = phase1.x, currentnov2020_phase2 = phase2.x, currentnov2020_phase3 = phase3.x, currentnov2020_phase4 = phase4.x, currentnov2020_phase5 = phase5.x,  currentnov2020_phase35 = phase35.x, currentnov2020_FCG_finalphase = FCG_finalphase, currentnov2020_HDDS_finalphase = HDDS_finalphase, currentnov2020_HHS_finalphase = HHS_finalphase, currentnov2020_LhHCSCat_finalphase = LhHCSCat_finalphase, currentnov2020_rCSI_finalphase = rCSI_finalphase, projectednov2020_population = population.y, projectednov2020_phase_class = phase_class.y, projectednov2020_phase1 = phase1.y, projectednov2020_phase2 = phase2.y, projectednov2020_phase3 = phase3.y, projectednov2020_phase4 = phase4.y, projectednov2020_phase5 = phase5.y,  projectednov2020_phase35 = phase35.y) %>%
select(-region,-chtype,-exercise_code,-exercise_label,-exercise_year,-reference_code,-reference_label,-reference_year,-status,-notes,-Comments,-DataSource,-UseThisPeriod)
names(cadre_harmonise_caf_ipc_nov2020)
names(cadre_harmonise_caf_ipc_nov2020adm1)
names(cadre_harmonise_caf_ipc_nov2020adm2)
table(cadre_harmonise_caf_ipc_nov2020adm2$currentnov2020_FCG_finalphase)
library(haven)
library(labelled)
library(tidyverse)
library(writexl)
library(officer)
library(flextable)
library(sjlabelled)
#import dataset
#dataset <- read_sav("C:/SLE_022021_CFSVA/3_ProcessedData/CFSVA-household-09022021-v13_1.sav")
#convert to labels - somethings maybe shouldnt be converted to factor
#dataset <- to_factor(dataset)
#import dataset
dataset <- read_csv("dataset_sample.csv")
###function to easily generate individual tables,  - long and wide
make1table_wide <- function(d, grp = NULL, col, weight = NULL) {
d %>%
group_by_at(grp) %>%
drop_na({{col}}) %>%
count({{col}}, wt = {{weight}}) %>%
mutate(perc = 100 * n / sum(n)) %>%
ungroup() %>% select(-n) %>%
pivot_wider(names_from = {{col}},
values_from = perc,
values_fill =  0) %>%
mutate_if(is.numeric, round, 1)
}
##
make1table_long <- function(d, grp = NULL, col, weight = NULL) {
d %>%
group_by_at(grp) %>%
drop_na({{col}}) %>%
count({{col}}, wt = {{weight}}) %>%
mutate(perc = 100 * n / sum(n)) %>%
ungroup() %>% select(-n) %>%
mutate_if(is.numeric, round, 1)
}
###multiple tables - long and wide
#wide
makemanytables_wide <- function(d, grp = NULL, cols, weight = NULL) {
grp_name <- paste(grp, collapse = "_")
l <- map(cols,
function(x) make1table_wide(d, grp, !!sym(x), {{weight}})) %>%
set_names(paste0(grp_name,"_",cols,"_table_widez"))
invisible(list2env(l, envir = .GlobalEnv))
}
#long
makemanytables_long <- function(d, grp = NULL, cols, weight = NULL) {
grp_name <- paste(grp, collapse = "_")
l <- map(cols,
function(x) make1table_long(d, grp, !!sym(x), {{weight}})) %>%
set_names(paste0(grp_name,"_",cols,"_table_long"))
invisible(list2env(l, envir = .GlobalEnv))
}
#rename/format some variables
dataset <- dataset %>% mutate(district_name2 = case_when(district_name == "Western Area Slum" ~ "Western Area Urban", TRUE ~ district_name),
area_area2 = case_when(area_area == "Slum" ~ "Urban", TRUE ~ area_area))
#Make many wide tables
makemanytables_wide(dataset, grp = c("sex_1"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("marital_status"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("chronic_illness"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("highest_edu_level"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("hhs_00123"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("do_rent_this_house"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("materials_roof"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("materials_walls"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("materials_floor"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("dry_season"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("rainy_season"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("Water_safe_dry"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("Water_safe_rainy"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("does_your_hhs_land"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("if_yes_then_typeaccess"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("Nwealth_group_now"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("Access_health"), cols = c("Food_sec_classification"), weight = hhweight)
#by adm2
makemanytables_wide(dataset, grp = c("district_name2","sex_1"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","marital_status"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","chronic_illness"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","highest_edu_level"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","hhs_00123"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","do_rent_this_house"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","materials_roof"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","materials_walls"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","materials_floor"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","dry_season"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","rainy_season"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","Water_safe_dry"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","Water_safe_rainy"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","does_your_hhs_land"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","if_yes_then_typeaccess"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","Nwealth_group_now"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_wide(dataset, grp = c("district_name2","Access_health"), cols = c("Food_sec_classification"), weight = hhweight)
#adm2 by urban/rural
makemanytables_wide(dataset, grp = c("district_name2","area_area2"), cols = c("Food_sec_classification"), weight = hhweight)
#by adm3
makemanytables_wide(dataset, grp = c("district_name2","chiefdom_name"), cols = c("Food_sec_classification"), weight = hhweight)
#Make many long tables
makemanytables_long(dataset, grp = c("sex_1"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("marital_status"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("chronic_illness"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("highest_edu_level"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("hhs_00123"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("do_rent_this_house"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("materials_roof"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("materials_walls"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("materials_floor"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("dry_season"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("rainy_season"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("Water_safe_dry"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("Water_safe_rainy"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("does_your_hhs_land"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("if_yes_then_typeaccess"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("Nwealth_group_now"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("Access_health"), cols = c("Food_sec_classification"), weight = hhweight)
#by adm2
makemanytables_long(dataset, grp = c("district_name2","sex_1"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","marital_status"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","chronic_illness"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","highest_edu_level"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","hhs_00123"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","do_rent_this_house"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","materials_roof"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","materials_walls"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","materials_floor"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","dry_season"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","rainy_season"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","Water_safe_dry"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","Water_safe_rainy"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","does_your_hhs_land"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","if_yes_then_typeaccess"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","Nwealth_group_now"), cols = c("Food_sec_classification"), weight = hhweight)
makemanytables_long(dataset, grp = c("district_name2","Access_health"), cols = c("Food_sec_classification"), weight = hhweight)
#adm2 by urban/rural
makemanytables_long(dataset, grp = c("district_name2","area_area2"), cols = c("Food_sec_classification"), weight = hhweight)
#by adm3
makemanytables_long(dataset, grp = c("district_name2","chiefdom_name"), cols = c("Food_sec_classification"), weight = hhweight)
#output all wide tables to excel
l <- mget(ls(pattern = "table_widez"))
writexl::write_xlsx(l, "4_OutputTables\\SLE_CFSVA_outputtables.xlsx")
#theme to make graphs
theme_vamgraphs <- function(){
font <- "Open Sans"   #assign font family up front
theme_minimal() %+replace%    #replace elements we want to change
theme(
#grid elements
panel.grid.major = element_blank(),    #strip major gridlines
panel.grid.minor = element_blank(),    #strip minor gridlines
axis.ticks = element_blank(),          #strip axis ticks
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(family = "Open Sans SemiBold", color = "black", size = 10),
axis.text.y =  element_text(family = "Open Sans SemiBold", color = "black", size = 10),
strip.text.y = element_text(angle = 0),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(family = "Open Sans SemiBold", color = "black", size = 8),
legend.box.spacing = unit(0.1, 'cm'))
}
#colors and theme
cari_colors = c("Food secure"="#ffd7d7", "Marginally food secure"="#ff6e6e","Moderately food insecure"="#d70000","Severely food insecure"="#820000")
#make ggplots easier through a function
make1_barplotz <- function(longtable, fillvar, yvar, xvar, titledatvar) {
longtable %>% ggplot(aes(fill = {{fillvar}}, y={{yvar}}, x={{xvar}})) +geom_col(position="fill") +coord_flip() +theme_vamgraphs() +scale_fill_manual(values=cari_colors) +geom_text(aes(label = perc), position = position_fill(vjust = 0.5)) +scale_y_continuous(labels = scales::percent) +ggtitle(get_label(titledatvar))
}
#make graphs
sex_1_cari_barplot <- make1_barplotz(sex_1_Food_sec_classification_table_long, Food_sec_classification, perc, sex_1, dataset$sex_1)
marital_status_cari_barplot <- make1_barplotz(marital_status_Food_sec_classification_table_long, Food_sec_classification, perc, marital_status, dataset$marital_status)
chronic_illness_cari_barplot <- make1_barplotz(chronic_illness_Food_sec_classification_table_long, Food_sec_classification, perc, chronic_illness, dataset$chronic_illness)
highest_edu_level_cari_barplot <- make1_barplotz(highest_edu_level_Food_sec_classification_table_long, Food_sec_classification, perc, highest_edu_level, dataset$highest_edu_level)
hhs_00123_cari_barplot <- make1_barplotz(hhs_00123_Food_sec_classification_table_long, Food_sec_classification, perc, hhs_00123, dataset$hhs_00123)
do_rent_this_house_cari_barplot <- make1_barplotz(do_rent_this_house_Food_sec_classification_table_long, Food_sec_classification, perc, do_rent_this_house, dataset$do_rent_this_house)
materials_roof_cari_barplot <- make1_barplotz(materials_roof_Food_sec_classification_table_long, Food_sec_classification, perc, materials_roof, dataset$materials_roof)
materials_walls_cari_barplot <- make1_barplotz(materials_walls_Food_sec_classification_table_long, Food_sec_classification, perc, materials_walls, dataset$materials_walls)
materials_floor_cari_barplot <- make1_barplotz(materials_floor_Food_sec_classification_table_long, Food_sec_classification, perc, materials_floor, dataset$materials_floor)
dry_season_cari_barplot <- make1_barplotz(dry_season_Food_sec_classification_table_long, Food_sec_classification, perc, dry_season, dataset$dry_season)
rainy_season_cari_barplot <- make1_barplotz(rainy_season_Food_sec_classification_table_long, Food_sec_classification, perc, rainy_season, dataset$rainy_season)
Water_safe_dry_cari_barplot <- make1_barplotz(Water_safe_dry_Food_sec_classification_table_long, Food_sec_classification, perc, Water_safe_dry, dataset$Water_safe_dry)
Water_safe_rainy_cari_barplot <- make1_barplotz(Water_safe_rainy_Food_sec_classification_table_long, Food_sec_classification, perc, Water_safe_rainy, dataset$Water_safe_rainy)
does_your_hhs_land_cari_barplot <- make1_barplotz(does_your_hhs_land_Food_sec_classification_table_long, Food_sec_classification, perc, does_your_hhs_land, dataset$does_your_hhs_land)
if_yes_then_typeaccess_cari_barplot <- make1_barplotz(if_yes_then_typeaccess_Food_sec_classification_table_long, Food_sec_classification, perc, if_yes_then_typeaccess, dataset$if_yes_then_typeaccess)
Nwealth_group_now_cari_barplot <- make1_barplotz(Nwealth_group_now_Food_sec_classification_table_long, Food_sec_classification, perc, Nwealth_group_now, dataset$Nwealth_group_now)
Access_health_cari_barplot <- make1_barplotz(Access_health_Food_sec_classification_table_long, Food_sec_classification, perc, Access_health, dataset$Access_health)
#with adm2
adm2_sex_1_adm2_cari_barplot <- make1_barplotz(district_name2_sex_1_Food_sec_classification_table_long, Food_sec_classification, perc, sex_1, dataset$sex_1) +facet_grid(district_name2 ~ .)
adm2_marital_status_cari_barplot <- make1_barplotz(district_name2_marital_status_Food_sec_classification_table_long, Food_sec_classification, perc, marital_status, dataset$marital_status) +facet_grid(district_name2 ~ .)
adm2_chronic_illness_cari_barplot <- make1_barplotz(district_name2_chronic_illness_Food_sec_classification_table_long, Food_sec_classification, perc, chronic_illness, dataset$chronic_illness) +facet_grid(district_name2 ~ .)
adm2_highest_edu_level_cari_barplot <- make1_barplotz(district_name2_highest_edu_level_Food_sec_classification_table_long, Food_sec_classification, perc, highest_edu_level, dataset$highest_edu_level) +facet_grid(district_name2 ~ .)
adm2_hhs_00123_cari_barplot <- make1_barplotz(district_name2_hhs_00123_Food_sec_classification_table_long, Food_sec_classification, perc, hhs_00123, dataset$hhs_00123) +facet_grid(district_name2 ~ .)
adm2_do_rent_this_house_cari_barplot <- make1_barplotz(district_name2_do_rent_this_house_Food_sec_classification_table_long, Food_sec_classification, perc, do_rent_this_house, dataset$do_rent_this_house) +facet_grid(district_name2 ~ .)
adm2_materials_roof_cari_barplot <- make1_barplotz(district_name2_materials_roof_Food_sec_classification_table_long, Food_sec_classification, perc, materials_roof, dataset$materials_roof) +facet_grid(district_name2 ~ .)
adm2_materials_walls_cari_barplot <- make1_barplotz(district_name2_materials_walls_Food_sec_classification_table_long, Food_sec_classification, perc, materials_walls, dataset$materials_walls) +facet_grid(district_name2 ~ .)
adm2_materials_floor_cari_barplot <- make1_barplotz(district_name2_materials_floor_Food_sec_classification_table_long, Food_sec_classification, perc, materials_floor, dataset$materials_floor) +facet_grid(district_name2 ~ .)
adm2_dry_season_cari_barplot <- make1_barplotz(district_name2_dry_season_Food_sec_classification_table_long, Food_sec_classification, perc, dry_season, dataset$dry_season) +facet_grid(district_name2 ~ .)
adm2_rainy_season_cari_barplot <- make1_barplotz(district_name2_rainy_season_Food_sec_classification_table_long, Food_sec_classification, perc, rainy_season, dataset$rainy_season) +facet_grid(district_name2 ~ .)
adm2_Water_safe_dry_cari_barplot <- make1_barplotz(district_name2_Water_safe_dry_Food_sec_classification_table_long, Food_sec_classification, perc, Water_safe_dry, dataset$Water_safe_dry) +facet_grid(district_name2 ~ .)
adm2_Water_safe_rainy_cari_barplot <- make1_barplotz(district_name2_Water_safe_rainy_Food_sec_classification_table_long, Food_sec_classification, perc, Water_safe_rainy, dataset$Water_safe_rainy) +facet_grid(district_name2 ~ .)
adm2_does_your_hhs_land_cari_barplot <- make1_barplotz(district_name2_does_your_hhs_land_Food_sec_classification_table_long, Food_sec_classification, perc, does_your_hhs_land, dataset$does_your_hhs_land) +facet_grid(district_name2 ~ .)
adm2_if_yes_then_typeaccess_cari_barplot <- make1_barplotz(district_name2_if_yes_then_typeaccess_Food_sec_classification_table_long, Food_sec_classification, perc, if_yes_then_typeaccess, dataset$if_yes_then_typeaccess) +facet_grid(district_name2 ~ .)
adm2_Nwealth_group_now_cari_barplot <- make1_barplotz(district_name2_Nwealth_group_now_Food_sec_classification_table_long, Food_sec_classification, perc, Nwealth_group_now, dataset$Nwealth_group_now) +facet_grid(district_name2 ~ .)
adm2_Access_health_cari_barplot <- make1_barplotz(district_name2_Access_health_Food_sec_classification_table_long, Food_sec_classification, perc, Access_health, dataset$Access_health) +facet_grid(district_name2 ~ .)
#adm2 by urban/rural
adm2_area_area2_cari_barplot <- make1_barplotz(district_name2_area_area2_Food_sec_classification_table_long, Food_sec_classification, perc, area_area2, dataset$area_area) +facet_grid(district_name2 ~ .)
#by adm3
adm3_area_district_name2_cari_barplot <- make1_barplotz(district_name2_chiefdom_name_Food_sec_classification_table_long, Food_sec_classification, perc, chiefdom_name, dataset$chiefdom_name)
#copied from https://www.pipinghotdata.com/posts/2020-09-22-exporting-editable-ggplot-graphics-to-powerpoint-with-officer-and-purrr/
#create list of all the plots
listofplots <- list(sex_1_cari_barplot, marital_status_cari_barplot, chronic_illness_cari_barplot, highest_edu_level_cari_barplot,
hhs_00123_cari_barplot, do_rent_this_house_cari_barplot, materials_roof_cari_barplot, materials_walls_cari_barplot,
materials_floor_cari_barplot, dry_season_cari_barplot, rainy_season_cari_barplot, Water_safe_dry_cari_barplot, Water_safe_rainy_cari_barplot,
does_your_hhs_land_cari_barplot, if_yes_then_typeaccess_cari_barplot, Nwealth_group_now_cari_barplot, Access_health_cari_barplot,
adm2_sex_1_adm2_cari_barplot, adm2_marital_status_cari_barplot, adm2_chronic_illness_cari_barplot, adm2_highest_edu_level_cari_barplot,
adm2_hhs_00123_cari_barplot, adm2_do_rent_this_house_cari_barplot, adm2_materials_roof_cari_barplot, adm2_materials_walls_cari_barplot, adm2_materials_floor_cari_barplot,
adm2_dry_season_cari_barplot, adm2_rainy_season_cari_barplot, adm2_Water_safe_dry_cari_barplot, adm2_Water_safe_rainy_cari_barplot, adm2_does_your_hhs_land_cari_barplot,
adm2_if_yes_then_typeaccess_cari_barplot, adm2_Nwealth_group_now_cari_barplot, adm2_Access_health_cari_barplot, adm2_area_area2_cari_barplot, adm3_area_district_name2_cari_barplot)
#create_dml, converts the ggplot objects to dml objects.
create_dml <- function(plot){
rvg::dml(ggobj = plot)
}
#Apply this function to the list of ggplot objects to create a list of dml objects with the same dimension.
plots_dml <- purrr::map(listofplots, create_dml)
# function to export plot to PowerPoint ----
create_pptx <- function(plot, path, left = 0.5, top = 0.5, width = 9, height = 7){
# if file does not yet exist, create new PowerPoint ----
if (!file.exists(path)) {
out <- officer::read_pptx()
}
# if file exist, append slides to exisiting file ----
else {
out <- officer::read_pptx(path)
}
out %>%
officer::add_slide() %>%
officer::ph_with(plot, location = officer::ph_location(
width = width, height = height, left = left, top = top)) %>%
base::print(target = path)
}
##now fire away!
purrr::map(
# dml plots to export ----
plots_dml,
# exporting function ----
create_pptx,
# additional fixed arguments in create_pptx ----
path = "SLE_CFSVA_CARIgraphics.pptx"
)
#how to make this purr like above so that is spits out a powerpoint of flextables of all the objects
#make all objects in list of tables - flextable
all_wide_flextables <- purrr::walk(l, flextable())
one <- flextable(Water_safe_rainy_Food_sec_classification_table_widez)
two <- flextable(district_name_Water_safe_rainy_Food_sec_classification_table_widez)
tf <- tempfile(fileext = ".pptx")
save_as_pptx(one, two,
path = "C:\\SLE_022021_CFSVA\\tables.pptx")
save_as_pptx(l, path = "C:\\SLE_022021_CFSVA\\test.pptx")
library(haven)
library(labelled)
library(tidyverse)
library(writexl)
library(officer)
library(flextable)
library(sjlabelled)
#import dataset
#dataset <- read_sav("C:/SLE_022021_CFSVA/3_ProcessedData/CFSVA-household-09022021-v13_1.sav")
#convert to labels - somethings maybe shouldnt be converted to factor
#dataset <- to_factor(dataset)
#import dataset
dataset <- read_csv("dataset_sample.csv")
