library(tidyverse)
library(stringr)
library(sf)
library(readxl)
library(writexl)
library(fs)
library(stringdist)
library(googledrive)
library(googlesheets4)
## File template
file_regex <- "^\\w{3}_(mar|nov|jun)\\d{4}_(cur|proj)\\.csv"
##
files <- dir_ls("data/csv", type = "file", recurse = TRUE)
## Check if all files follow the patterns
stopifnot(all(str_detect(basename(files), file_regex)))
files[which(!str_detect(basename(files), file_regex))]
## Remove June
#files <- files[!str_detect(files, "jun")]
exercise_code <- function(file) {
case_when(
str_detect(file, "nov") ~ 1L,
str_detect(file, "mar") ~ 2L,
str_detect(file, "jun") ~ 3L,
TRUE ~ 0L
)
}
exercise_label <- function(file) {
case_when(
str_detect(file, "nov") ~ "Sep-Dec",
str_detect(file, "mar") ~ "Jan-May",
str_detect(file, "jun") ~ "Jun-Aug",
TRUE ~ ""
)
}
exercise_year <- function(file)
as.integer(str_extract(file, "\\d{4}"))
reference_code <- function(file) {
if_else(str_detect(file, "proj"), if_else(str_detect(file, "nov2014"), 2L, 3L), exercise_code(file))
}
reference_label <- function(file) {
if_else(str_detect(file, "proj"), if_else(str_detect(file, "nov2014"), "Jan-May", "Jun-Aug"), exercise_label(file))
}
reference_year <- function(file) {
ex_year <- exercise_year(file)
ex_code <- exercise_code(file)
if_else(str_detect(file, "proj") & ex_code == 1L, ex_year + 1L, ex_year)
}
guess_file_encoding <- function(file) {
guess_encoding(file) %>%
slice(1) %>%
pull(encoding)
}
dd <- map(files, function(l) {
df <- suppressMessages(read_csv(l, locale = locale(encoding = guess_file_encoding(l))))
df$exercise_year <- exercise_year(l)
df$exercise_code <- exercise_code(l)
df$reference_year <- reference_year(l)
df$reference_code <- reference_code(l)
df$exercise_label <- exercise_label(l)
df$reference_label <- reference_label(l)
df$chtype <- if_else(str_detect(l, "proj"), "projected", "current")
df
})
## Bind all data
df <- bind_rows(dd)
## Remove accent and replace them by non ascii version
df$country <- iconv(str_to_title(df$country), from = "UTF-8", to = "ASCII//TRANSLIT")
df$country[str_which(df$country, regex("ivoire", ignore_case = TRUE))] <- "Cote d'Ivoire"
df$region <- iconv(str_to_title(df$region), from = "UTF-8",to = "ASCII//TRANSLIT")
df$adm1 <- iconv(str_to_title(df$adm1), from = "UTF-8", to = "ASCII//TRANSLIT")
df$adm2 <- iconv(str_to_title(df$adm2), from = "UTF-8", to = "ASCII//TRANSLIT")
### Rename columns
all <- df %>%
filter(!is.na(classif)) %>%
select(adm0_name = country, region, adm1_name = adm1, adm2_name = adm2,
population = pop, phase_class = classif, phase1:phase35,
chtype, exercise_code, exercise_label, exercise_year, reference_code, reference_label, reference_year, status, fc_phase, lh_phase,	nut_phase,	mort_phase,
FCG_Poor,	FCG_Borderline,	FCG_Acceptable,	FCG_finalphase,	HDDS_Phase1,	HDDS_Phase2,	HDDS_Phase3,	HDDS_Phase4,	HDDS_Phase5,	HDDS_finalphase,	HHS_Phase1,	HHS_Phase2,	HHS_Phase3,	HHS_Phase4,	HHS_Phase5,
HHS_finalphase,	NoStrategies,	StressStrategies,	CrisisStrategies,	EmergencyStrategies,	LhHCSCat_finalphase,	rCSI_Phase1,	rCSI_Phase2,	rCSI_Phase3,	rCSI_finalphase)
library(tidyverse)
library(stringr)
library(sf)
library(readxl)
library(writexl)
library(fs)
library(stringdist)
library(googledrive)
library(googlesheets4)
## File template
file_regex <- "^\\w{3}_(mar|nov|jun)\\d{4}_(cur|proj)\\.csv"
##
files <- dir_ls("data/csv", type = "file", recurse = TRUE)
## Check if all files follow the patterns
stopifnot(all(str_detect(basename(files), file_regex)))
files[which(!str_detect(basename(files), file_regex))]
## Remove June
#files <- files[!str_detect(files, "jun")]
exercise_code <- function(file) {
case_when(
str_detect(file, "nov") ~ 1L,
str_detect(file, "mar") ~ 2L,
str_detect(file, "jun") ~ 3L,
TRUE ~ 0L
)
}
exercise_label <- function(file) {
case_when(
str_detect(file, "nov") ~ "Sep-Dec",
str_detect(file, "mar") ~ "Jan-May",
str_detect(file, "jun") ~ "Jun-Aug",
TRUE ~ ""
)
}
exercise_year <- function(file)
as.integer(str_extract(file, "\\d{4}"))
reference_code <- function(file) {
if_else(str_detect(file, "proj"), if_else(str_detect(file, "nov2014"), 2L, 3L), exercise_code(file))
}
reference_label <- function(file) {
if_else(str_detect(file, "proj"), if_else(str_detect(file, "nov2014"), "Jan-May", "Jun-Aug"), exercise_label(file))
}
reference_year <- function(file) {
ex_year <- exercise_year(file)
ex_code <- exercise_code(file)
if_else(str_detect(file, "proj") & ex_code == 1L, ex_year + 1L, ex_year)
}
guess_file_encoding <- function(file) {
guess_encoding(file) %>%
slice(1) %>%
pull(encoding)
}
dd <- map(files, function(l) {
df <- suppressMessages(read_csv(l, locale = locale(encoding = guess_file_encoding(l))))
df$exercise_year <- exercise_year(l)
df$exercise_code <- exercise_code(l)
df$reference_year <- reference_year(l)
df$reference_code <- reference_code(l)
df$exercise_label <- exercise_label(l)
df$reference_label <- reference_label(l)
df$chtype <- if_else(str_detect(l, "proj"), "projected", "current")
df
})
## Bind all data
df <- bind_rows(dd)
## Remove accent and replace them by non ascii version
df$country <- iconv(str_to_title(df$country), from = "UTF-8", to = "ASCII//TRANSLIT")
df$country[str_which(df$country, regex("ivoire", ignore_case = TRUE))] <- "Cote d'Ivoire"
df$region <- iconv(str_to_title(df$region), from = "UTF-8",to = "ASCII//TRANSLIT")
df$adm1 <- iconv(str_to_title(df$adm1), from = "UTF-8", to = "ASCII//TRANSLIT")
df$adm2 <- iconv(str_to_title(df$adm2), from = "UTF-8", to = "ASCII//TRANSLIT")
### Rename columns
all <- df %>%
filter(!is.na(classif)) %>%
select(adm0_name = country, region, adm1_name = adm1, adm2_name = adm2,
population = pop, phase_class = classif, phase1:phase35,
chtype, exercise_code, exercise_label, exercise_year, reference_code, reference_label, reference_year,
foodconsumption_phase, livelihoods_phase,	nutrition_phase,	mortality_phase)
#FCG_Poor,	FCG_Borderline,	FCG_Acceptable,	FCG_finalphase,	HDDS_Phase1,	HDDS_Phase2,	HDDS_Phase3,	HDDS_Phase4,	HDDS_Phase5,	HDDS_finalphase,	HHS_Phase1,	HHS_Phase2,	HHS_Phase3,	HHS_Phase4,	HHS_Phase5,
#HHS_finalphase,	NoStrategies,	StressStrategies,	CrisisStrategies,	EmergencyStrategies,	LhHCSCat_finalphase,	rCSI_Phase1,	rCSI_Phase2,	rCSI_Phase3,	rCSI_finalphase
library(tidyverse)
library(stringr)
library(sf)
library(readxl)
library(writexl)
library(fs)
library(stringdist)
library(googledrive)
library(googlesheets4)
#Notes
#can import part be simplified - maybe make the csv's do a little more work?
#CAR IPC data can definetly be cleaned up
## File template
file_regex <- "^\\w{3}_(mar|nov|jun)\\d{4}_(cur|proj)\\.csv"
##
files <- dir_ls("data/csv", type = "file", recurse = TRUE)
## Check if all files follow the patterns
stopifnot(all(str_detect(basename(files), file_regex)))
files[which(!str_detect(basename(files), file_regex))]
exercise_code <- function(file) {
case_when(
str_detect(file, "nov") ~ 1L,
str_detect(file, "mar") ~ 2L,
str_detect(file, "jun") ~ 3L,
TRUE ~ 0L
)
}
exercise_label <- function(file) {
case_when(
str_detect(file, "nov") ~ "Sep-Dec",
str_detect(file, "mar") ~ "Jan-May",
str_detect(file, "jun") ~ "Jun-Aug",
TRUE ~ ""
)
}
exercise_year <- function(file)
as.integer(str_extract(file, "\\d{4}"))
reference_code <- function(file) {
if_else(str_detect(file, "proj"), if_else(str_detect(file, "nov2014"), 2L, 3L), exercise_code(file))
}
reference_label <- function(file) {
if_else(str_detect(file, "proj"), if_else(str_detect(file, "nov2014"), "Jan-May", "Jun-Aug"), exercise_label(file))
}
reference_year <- function(file) {
ex_year <- exercise_year(file)
ex_code <- exercise_code(file)
if_else(str_detect(file, "proj") & ex_code == 1L, ex_year + 1L, ex_year)
}
guess_file_encoding <- function(file) {
guess_encoding(file) %>%
slice(1) %>%
pull(encoding)
}
dd <- map(files, function(l) {
df <- suppressMessages(read_csv(l, locale = locale(encoding = guess_file_encoding(l))))
df$exercise_year <- exercise_year(l)
df$exercise_code <- exercise_code(l)
df$reference_year <- reference_year(l)
df$reference_code <- reference_code(l)
df$exercise_label <- exercise_label(l)
df$reference_label <- reference_label(l)
df$chtype <- if_else(str_detect(l, "proj"), "projected", "current")
df
})
## Bind all data
df <- bind_rows(dd)
## Remove accent and replace them by non ascii version
df$country <- iconv(str_to_title(df$country), from = "UTF-8", to = "ASCII//TRANSLIT")
df$country[str_which(df$country, regex("ivoire", ignore_case = TRUE))] <- "Cote d'Ivoire"
df$region <- iconv(str_to_title(df$region), from = "UTF-8",to = "ASCII//TRANSLIT")
df$adm1 <- iconv(str_to_title(df$adm1), from = "UTF-8", to = "ASCII//TRANSLIT")
df$adm2 <- iconv(str_to_title(df$adm2), from = "UTF-8", to = "ASCII//TRANSLIT")
### Rename columns
all <- df %>%
filter(!is.na(classif)) %>%
select(adm0_name = country, adm0_5_name = region, adm1_name = adm1, adm2_name = adm2,
population = pop, phase_class = classif, phase1:phase35,
chtype, exercise_code, exercise_label, exercise_year, reference_code, reference_label, reference_year,
foodconsumption_phase, livelihoods_phase,	nutrition_phase,	mortality_phase)
#FCG_Poor,	FCG_Borderline,	FCG_Acceptable,	FCG_finalphase,	HDDS_Phase1,	HDDS_Phase2,	HDDS_Phase3,	HDDS_Phase4,	HDDS_Phase5,	HDDS_finalphase,	HHS_Phase1,	HHS_Phase2,	HHS_Phase3,	HHS_Phase4,	HHS_Phase5,
#HHS_finalphase,	NoStrategies,	StressStrategies,	CrisisStrategies,	EmergencyStrategies,	LhHCSCat_finalphase,	rCSI_Phase1,	rCSI_Phase2,	rCSI_Phase3,	rCSI_finalphase
